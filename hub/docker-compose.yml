volumes:
  mysql_data:
    driver: local
  kafka_data:
    driver: local
services:
  mysql:
    image: mysql/mysql-server
    container_name: hub-mysql
    deploy:
      replicas: 1
    # logging:
    #   driver: none
    ports:
      - 3306:3306
    volumes:
      - mysql_data:/var/lib/mysql
    configs:
      - source: mysql-init.sql
        target: /docker-entrypoint-initdb.d/mysql-init.sql
    environment:
      - MYSQL_USER=${DBUSER:-central_ledger}
      - MYSQL_PASSWORD=${DBPASS:-password}
      - MYSQL_DATABASE=${DBUSER:-central_ledger}
      - MYSQL_ALLOW_EMPTY_PASSWORD=true
    healthcheck:
      test: mysqladmin ping -h mysql
      timeout: 20s
      retries: 10
      start_period: 40s
      interval: 30s
  kafka:
    image: bitnami/kafka:3.5
    container_name: hub-kafka
    ports:
      - 9092:9092
    environment:
      # BITNAMI_DEBUG: "yes"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_ADVERTISED_HOST_NAME: hub-kafka
      KAFKA_CFG_LISTENERS: CONTROLLER://:9093,LISTENER_DOCKER://:29092,LISTENER_EXTERN://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: LISTENER_DOCKER://hub-kafka:29092,LISTENER_EXTERN://host.docker.internal:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,LISTENER_DOCKER:PLAINTEXT,LISTENER_EXTERN:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_MESSAGE_MAX_BYTES: 200000000
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@127.0.0.1:9093
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_ENABLE_KRAFT: "true"
    healthcheck:
      test: ["CMD" ,"/opt/bitnami/kafka/bin/kafka-broker-api-versions.sh","--bootstrap-server","hub-kafka:29092"]
      timeout: 20s
      retries: 10
      start_period: 40s
      interval: 30s
    volumes:
      - kafka_data:/bitnami/kafka

  init-kafka:
    container_name: hub-init-kafka
    image: docker.io/bitnami/kafka:3.5
    depends_on:
      - kafka
    configs:
      - source: kafka-init.sh
        target: /tmp/kafka/scripts/provision.sh
    command: bash /tmp/kafka/scripts/provision.sh

  ## Debug utilities
  redpanda-console:
    container_name: hub-redpanda-console
    image: docker.redpanda.com/redpandadata/console:v2.7.2
    deploy:
      replicas: 1
    restart: on-failure
    ports:
      - 8080:8080
    environment:
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      - kafka
    profiles:
      - debug

  mongodb:
    container_name: hub-mongodb
    image: mongo:6.0.5
    ports:
      - 27017:27017
    # logging:
    #     driver: none
    healthcheck:
      test: mongosh --eval 'db.runCommand("ping").ok' localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  redis:
    image: redis:6.2.4-alpine
    container_name: hub-redis
    ports:
      - 6379:6379
    healthcheck:
      test: redis-cli ping
      timeout: 20s
      retries: 10
      start_period: 40s
      interval: 30s


##  To be used with proxyCache.type === 'redis'
#  redis:
#    image: redis:6.2.4-alpine
#    restart: "unless-stopped"
#    environment:
#      <<: *REDIS_ENVS
#      REDIS_CLUSTER_CREATOR: yes
#    depends_on:
#      - redis-node-1
#      - redis-node-2
#      - redis-node-3
#      - redis-node-4
#      - redis-node-5
#    ports:
#      - "6379:6379"

configs:
  mysql-init.sql:
    content: |
      -- create databases
      CREATE DATABASE IF NOT EXISTS `central_ledger`;
      CREATE DATABASE IF NOT EXISTS `account_lookup`;
      -- create root user and grant rights
      CREATE USER 'hub' @'%' identified WITH mysql_native_password by 'password';
      GRANT ALL ON *.* TO 'hub' @'%';
      FLUSH PRIVILEGES;
  kafka-init.sh:
    content: |
      #!/bin/bash

      KAFKAHOST="$${1:-hub-kafka}"
      KAFKAPORT="$${2:-29092}"

      # blocks until kafka is reachable
      echo -e "------------------------------------------"
      echo -e "Listing current kafka topics"
      echo -e "__________________________________________"
      kafka-topics.sh --bootstrap-server $$KAFKAHOST:$$KAFKAPORT --list
      echo -e ""
      echo -e "------------------------------------------"
      echo -e "Creating kafka topics"
      echo -e "__________________________________________"


      # List of topics to create
      topics=(
        "topic-admin-transfer"
        "topic-bulk-fulfil"
        "topic-bulk-get"
        "topic-bulk-prepare"
        "topic-bulk-processing"
        "topic-bulkquotes-get"
        "topic-bulkquotes-post"
        "topic-bulkquotes-put"
        "topic-fx-quotes-get"
        "topic-fx-quotes-post"
        "topic-fx-quotes-put"
        "topic-notification-event"
        "topic-quotes-get"
        "topic-quotes-post"
        "topic-quotes-put"
        "topic-transfer-fulfil"
        "topic-transfer-get"
        "topic-transfer-position-batch"
        "topic-transfer-position"
        "topic-transfer-prepare"
        "topic-sdk-outbound-domain-events"
      )

      # Loop through the topics and create them using kafka-topics.sh
      for topic in "$${topics[@]}"
      do
        echo -e "--> Creating topic $$topic..."
        kafka-topics.sh --bootstrap-server $$KAFKAHOST:$$KAFKAPORT --create --if-not-exists --topic "$$topic" --replication-factor 1 --partitions 1
      done

      echo -e ""
      echo -e "------------------------------------------"
      echo -e "Successfully created the following topics:"
      echo -e "__________________________________________"
      kafka-topics.sh --bootstrap-server $$KAFKAHOST:$$KAFKAPORT --list
